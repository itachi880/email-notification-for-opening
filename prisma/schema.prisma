// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  gmailPassword String?   // Encrypted app password
  accounts      Account[]
  sessions      Session[]
  emails        Email[]   // User's tracking emails
  sentEmails    SentEmail[] // User's sent emails
  createdAt     DateTime  @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Email {
  id            Int      @id @default(autoincrement())
  recipientEmail String
  subject       String?
  content       String?
  trackingId    String  @unique
  userId        String   // Link to user who created this tracking email
  createdAt     DateTime @default(now())
  emailOpens    EmailOpen[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emails")
}

model EmailOpen {
  id        Int      @id @default(autoincrement())
  emailId   Int
  openedAt  DateTime @default(now())
  ipAddress String?
  userAgent String?
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
  email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@map("email_opens")
}

model SentEmail {
  id             Int      @id @default(autoincrement())
  recipientEmail String
  subject        String?
  content        String?
  messageId      String?
  trackingId     String?
  userId         String   // Link to user who sent this email
  sentAt         DateTime @default(now())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sent_emails")
}
